import { expect } from "chai";
import fs from "fs";
import chakram from "chakram";
const assert = chakram.expect;
import _ from "lodash";
import frisby from "frisby";
import path from "path";

describe("Terms Config Penetration Tests", () => {
  const clientId = "28";
  const clientId_qa = "28";
  const clientId_qa_ui = "29";
  const clientId_qa_api = "30";
  const clientName_qa = "QA";
  const restrictedClientId = "30";
  const restrictedClientName = "QA_API";
  const restrictedEventId = "9d3f7f64-f5d9-42b9-b66a-8cacd4030e18";
  const restrictedWaterfallId = "b042f4ff-b124-400b-a089-bbccd5c73b8e";
  const eventId2 = "6492e572-afe0-4210-8f48-4fd7fd40e489";
  const waterfallName = "Automation-DealByDeal";
  const waterfallId_totalreturn = "32043505-7f23-4a54-bfb0-a077bae4ff1a";
  const waterfallId_investran = "27b12995-853f-4974-9aed-cd2aa96a9497"; //'d5b95dfb-780d-4479-aae9-a0bbe2ad330a'; // <-- Use this for DEV
  const waterfallName_investran = "Automation-Investran";
  let random_waterfallname =
    "AutoBot-" +
    Math.random()
      .toString(36)
      .substring(8);
  let cdEventName =
    "API-Event-" +
    Math.random()
      .toString(36)
      .substring(8);
  let udEventName = Math.random()
    .toString(36)
    .substring(8);
  const currency = "USD";
  let token = {};
  let newEventId = "";

  // DELETE
  it("POST Controller Terms Config (Client - QA, User - cwf_dev_tier2)", done => {
    fs.readFile("tokens.json", "utf8", function readFileCallback(err, data) {
      if (err) {
        console.log(err);
      } else {
        token = JSON.parse(data);
        // let configBody = {
        //   formData: {
        //     file: fs.createReadStream(
        //       path.join(__dirname, "/../../resources/Custom-Terms.xlsx")
        //     )
        //   },
        //   headers: {
        //     "content-type": "multipart/form-data",
        //     clientId: clientId_qa,
        //     waterfallId: waterfallId_totalreturn,
        //     clientName: "QA",
        //     calculationResultsMethod: "SPECIFIC_INVESTOR_ID",
        //     Cookie: "JWT=" + token.jwt + "; SMSESSION=" + token.smsession
        //   },
        //   strictSSL: false
        // };

        let configBody = {
          headers: {
            "content-type": "application/json",
            Cookie: "JWT=" + token.jwt + "; SMSESSION=" + token.smsession,

            Connection: "keep-alive",
            // clientId: clientId_qa,
            waterfallId: waterfallId_totalreturn
          },
          strictSSL: false
        };
        return chakram
          .delete(
            token.url + "core/terms/" + waterfallId_totalreturn,
            undefined,
            configBody
          )
          .then(function(res) {
            assert(res).to.have.status(401);
          })
          .done(done);

        // chakram
        //   .post(token.url + "core/terms/upload/", undefined, configBody)
        //   .then(function(res) {
        //     assert(res).to.have.status(401);

        //     let configBody = {
        //       headers: {
        //         clientId: clientId_qa,
        //         waterfallId: waterfallId_totalreturn,
        //         Cookie: "JWT=" + token.jwt + "; SMSESSION=" + token.smsession
        //       },
        //       body: {
        //         type: "terms",
        //         data: {
        //           attributes: [
        //             {
        //               investorType: "CIP",
        //               defaultTermsCheck: "No",
        //               waterfallId: waterfallId_totalreturn,
        //               tiers: {
        //                 "0cffc800-ee6f-4f3b-9822-298672cf87c5": {
        //                   cipAllocation: 0,
        //                   lpTarget: 8
        //                 },
        //                 "6207247d-dde1-4148-88b1-18cd924a25f8": {
        //                   cipAllocation: 80,
        //                   cipTarget: 20
        //                 },
        //                 "d9bec2cf-1bba-464c-97cc-f228bbc0cd85": {
        //                   cipAllocation: 20
        //                 }
        //               },
        //               totalCommitment: null,
        //               investorName: "Investor 5",
        //               investorId: "47100",
        //               legalEntity: null
        //             }
        //           ]
        //         }
        //       },
        //       strictSSL: false
        //     };
        //     return chakram.post(
        //       token.url + "core/terms/update/",
        //       undefined,
        //       configBody
        //     );
        //   })
        //   .then(function(res) {
        //     assert(res).to.have.status(401);

        //     let configBody = {
        //       headers: {
        //         "content-type": "application/json",
        //         Cookie: "JWT=" + token.jwt + "; SMSESSION=" + token.smsession,
        //         Connection: "keep-alive",
        //         waterfallId: waterfallId_totalreturn
        //       },
        //       strictSSL: false
        //     };
        //     return chakram.get(
        //       token.url + "core/terms/" + waterfallId_totalreturn,
        //       configBody
        //     );
        //   })
        //   .then(function(res) {
        //     assert(res).to.have.status(200);

        //     let configBody = {
        //       headers: {
        //         "content-type": "application/json",
        //         Cookie: "JWT=" + token.jwt + "; SMSESSION=" + token.smsession,
        //         Connection: "keep-alive",
        //         waterfallId: waterfallId_totalreturn
        //       },
        //       strictSSL: false
        //     };
        //     return chakram.delete(
        //       token.url + "core/terms/" + waterfallId_totalreturn,
        //       configBody
        //     );
        //   })
        //   .then(function(res) {
        //     assert(res).to.have.status(401);
        //   })
        //   .done(done);
      }
    });
  });

  // POST
  it.skip("POST Controller Terms Config (Client - QA, User - cwf_dev_tier2)", done => {
    fs.readFile("tokens.json", "utf8", function readFileCallback(err, data) {
      if (err) {
        console.log(err);
      } else {
        token = JSON.parse(data);
        let configBody = {
          formData: {
            file: fs.createReadStream(
              path.join(__dirname, "/../../resources/Custom-Terms.xlsx")
            )
          },
          headers: {
            "content-type": "multipart/form-data",
            clientId: clientId_qa,
            waterfallId: waterfallId_totalreturn,
            clientName: "QA",
            calculationResultsMethod: "SPECIFIC_INVESTOR_ID",
            Cookie: "JWT=" + token.jwt + "; SMSESSION=" + token.smsession
          },
          strictSSL: false
        };

        chakram
          .post(token.url + "core/terms/upload/", undefined, configBody)
          .then(function(res) {
            assert(res).to.have.status(401);
          })
          .done(done);
        /*
            let configBody = {
              headers: {
                clientId: clientId_qa,
                waterfallId: waterfallId_totalreturn,
                Cookie: "JWT=" + token.jwt + "; SMSESSION=" + token.smsession
              },
              body: {
                type: "terms",
                data: {
                  attributes: [
                    {
                      investorType: "CIP",
                      defaultTermsCheck: "No",
                      waterfallId: waterfallId_totalreturn,
                      tiers: {
                        "0cffc800-ee6f-4f3b-9822-298672cf87c5": {
                          cipAllocation: 0,
                          lpTarget: 8
                        },
                        "6207247d-dde1-4148-88b1-18cd924a25f8": {
                          cipAllocation: 80,
                          cipTarget: 20
                        },
                        "d9bec2cf-1bba-464c-97cc-f228bbc0cd85": {
                          cipAllocation: 20
                        }
                      },
                      totalCommitment: null,
                      investorName: "Investor 5",
                      investorId: "47100",
                      legalEntity: null
                    }
                  ]
                }
              },
              strictSSL: false
            };
            return chakram.post(
              token.url + "core/terms/update/",
              undefined,
              configBody
            );
          })
          .then(function(res) {
            assert(res).to.have.status(401);

            let configBody = {
              headers: {
                "content-type": "application/json",
                Cookie: "JWT=" + token.jwt + "; SMSESSION=" + token.smsession,
                Connection: "keep-alive",
                waterfallId: waterfallId_totalreturn
              },
              strictSSL: false
            };
            return chakram.get(
              token.url + "core/terms/" + waterfallId_totalreturn,
              configBody
            );
          })
          .then(function(res) {
            assert(res).to.have.status(200);

            let configBody = {
              headers: {
                "content-type": "application/json",
                Cookie: "JWT=" + token.jwt + "; SMSESSION=" + token.smsession,
                Connection: "keep-alive",
                waterfallId: waterfallId_totalreturn
              },
              strictSSL: false
            };
            return chakram.delete(
              token.url + "core/terms/" + waterfallId_totalreturn,
              configBody
            );
          })
          .then(function(res) {
            assert(res).to.have.status(401);
          })
          .done(done);
          */
      }
    });
  });
});
