import { expect } from 'chai';
import fs from 'fs';
import chakram from 'chakram';
const assert = chakram.expect;
import _ from 'lodash';
import frisby from 'frisby';
import path from 'path';

describe('Transactions Penetration Tests', () => {

	const clientId = '28';
	const clientId_qa = '28';
	const clientId_qa_ui = '29';
	const clientId_qa_api = '30';
	const clientName_qa = 'QA';
	const clientName_qa_api = 'QA_API';
	const clientName_qa_ui = 'QA_UI';
	const clientId_accountant_custom = '30';
	const waterfallId_accountant_custom = 'b788f20e-712f-49ce-b79e-d81d075ec2bf'; // CHANGE in DEV ///8a960c2d-213c-4bb2-8055-8428ef16f1af
	const clientId_readonly_custom = '29';
	const waterfallId_readonly_custom = '146248e1-442d-4758-ae7d-22e4dbf40741'; // CHANGE in DEV /// f8ae3827-50f2-4acb-ba59-2f30403e75c3
	const restrictedClientName = 'QA_API';
	const restrictedEventId = '9d3f7f64-f5d9-42b9-b66a-8cacd4030e18';
	const restrictedWaterfallId = 'b042f4ff-b124-400b-a089-bbccd5c73b8e';
	const eventId2 = '6492e572-afe0-4210-8f48-4fd7fd40e489';
	const waterfallId_custom = '73863370-d99c-4425-9f9b-6dabff70b255';
	const waterfallName = 'Automation-DealByDeal';
	const waterfallId_totalreturn = '32043505-7f23-4a54-bfb0-a077bae4ff1a';
	const waterfallId_investran = 'd5b95dfb-780d-4479-aae9-a0bbe2ad330a'; //'27b12995-853f-4974-9aed-cd2aa96a9497'; // <-- Use this for DEV
	const waterfallName_investran = 'Automation-Investran';
	let random_waterfallname = 'AutoBot-' + Math.random().toString(36).substring(8);
	let cdEventName = 'API-Event-' + Math.random().toString(36).substring(8);
	let udEventName = Math.random().toString(36).substring(8);
	const currency = 'USD';
	let token = {};
	let newEventId = '';


	it("PenTest GET NAV Transactions (Client - QA, User - cwf_dev_tier2, waterfall - Automation-Custom)", (done) => {
		fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
			if (err) {
				console.log(err);
			} else {
				token = JSON.parse(data);
				let configBody = {
					headers: {
						'content-type': 'application/json',
						'Cookie': 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
						'Connection': 'keep-alive',
						'waterfallId': waterfallId_custom
					},
					strictSSL: false
				}
				chakram.get(token.url + 'core/transactions/TR_NAV/' + waterfallId_custom, configBody)
					.then(function (res) {
						assert(res).to.have.status(200);

						let configBody = {
							headers: {
								'content-type': 'application/json',
								'Cookie': 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
								'Connection': 'keep-alive',
								'waterfallId': waterfallId_custom
							},
							strictSSL: false
						}
						return chakram.get(token.url + `core/transactions/meta/${waterfallId_custom}/`, configBody)
					}).then(function (res) {
						assert(res).to.have.status(200);

						let configBody = {
							headers: {
								'content-type': 'application/json',
								'Cookie': 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
								'Connection': 'keep-alive',
								'waterfallId': waterfallId_custom
							},
							strictSSL: false
						}
						return chakram.get(token.url + `core/transactions/count/TR_NAV/${waterfallId_custom}/`, configBody)
					}).then(function (res) {
						assert(res).to.have.status(200);

						let configBody = {
							headers: {
								'content-type': 'application/json',
								'Cookie': 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
								'Connection': 'keep-alive',
								'waterfallId': waterfallId_custom
							},
							strictSSL: false
						}
						return chakram.get(token.url + `core/buckets/start-download?waterfallId=${waterfallId_custom}&bucketName=TR_NAV&clientName=${clientName_qa}&title=NAV`, configBody)
					}).then(function (res) {
						assert(res).to.have.status(200);
						let configBody = {
							headers: {
								'content-type': 'application/json',
								'Cookie': 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
								'Connection': 'keep-alive',
								'waterfallId': waterfallId_custom
							},
							strictSSL: false
						}
						return chakram.delete(token.url + `core/transactions/TR_NAV/${waterfallId_custom}`, undefined, configBody)
					}).then(function (res) {
						assert(res).to.have.status(202);

					}).done(done);
			}
		});
	});


	it("Upload NAV Data - Custom Waterfall - Controller Role", (done) => {
		fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
			if (err) {
				console.log(err);
			} else {
				token = JSON.parse(data);
				let config = {
					formData: {
						file: fs.createReadStream(path.join(__dirname, '/../../resources/Custom-NAV.xlsx'))
					},
					headers: {
						'content-type': 'multipart/form-data',
						'clientId': clientId,
						'waterfallId': waterfallId_custom,
						'clientName': clientName_qa,
						'Cookie': 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession
					},
					strictSSL: false
				}

				chakram.post(token.url + 'core/transactions/upload/TR_NAV', undefined, config)
					.then(function (res) {
						assert(res).to.have.status(200);
					})
					.done(done);
			}
		});
	});

	it("Upload NAV Data - Custom Waterfall - Accountant Role", (done) => {
		fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
			if (err) {
				console.log(err);
			} else {
				token = JSON.parse(data);
				let config = {
					formData: {
						file: fs.createReadStream(path.join(__dirname, '/../../resources/Custom-NAV.xlsx'))
					},
					headers: {
						'content-type': 'multipart/form-data',
						'clientId': clientId_accountant_custom,
						'waterfallId': waterfallId_accountant_custom,
						'clientName': clientName_qa_api,
						'Cookie': 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession
					},
					strictSSL: false
				}

				chakram.post(token.url + 'core/transactions/upload/TR_NAV', undefined, config)
					.then(function (res) {
						assert(res).to.have.status(200);
					})
					.done(done);
			}
		});
	});

	it("Upload NAV Data - Custom Waterfall - Accountant Role", (done) => {
		fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
			if (err) {
				console.log(err);
			} else {
				token = JSON.parse(data);
				let config = {
					formData: {
						file: fs.createReadStream(path.join(__dirname, '/../../resources/Custom-NAV.xlsx'))
					},
					headers: {
						'content-type': 'multipart/form-data',
						'clientId': clientId_readonly_custom,
						'waterfallId': waterfallId_readonly_custom,
						'clientName': clientName_qa_ui,
						'Cookie': 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession
					},
					strictSSL: false
				}

				chakram.post(token.url + 'core/transactions/upload/TR_NAV', undefined, config)
					.then(function (res) {
						assert(res).to.have.status(401);
					})
					.done(done);
			}
		});
	});


});

