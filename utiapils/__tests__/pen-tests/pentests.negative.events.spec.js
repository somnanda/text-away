import { expect } from 'chai';
import fs from 'fs';
import chakram from 'chakram';
const assert = chakram.expect;
import _ from 'lodash';
import frisby from 'frisby';
import path from 'path';

describe('Negative Events Penetration Tests', () => {

	const clientId = '28';
	const clientId_qa = '28';
	const clientName_qa = 'QA';
	const restrictedClientId = '30';
	const restrictedClientName = 'QA_API';
	const restrictedEventId = '9d3f7f64-f5d9-42b9-b66a-8cacd4030e18';
	const restrictedWaterfallId = 'b042f4ff-b124-400b-a089-bbccd5c73b8e';
	const eventId2 = '6492e572-afe0-4210-8f48-4fd7fd40e489';
	const waterfallName = 'Automation-DealByDeal';
	const waterfallId_totalreturn = '32043505-7f23-4a54-bfb0-a077bae4ff1a';
	const waterfallId_investran = 'some-random-waterfall-id';
	const waterfallName_investran = 'Automation-Investran';
	let random_waterfallname = 'AutoBot-' + Math.random().toString(36).substring(8);
	let cdEventName = 'API-Event-' + Math.random().toString(36).substring(8);
	let udEventName = Math.random().toString(36).substring(8);
	const currency = 'USD';
	let token = {};
	let newEventId = '';


	it("Negative Scenario - Add Event for Controller Role for random WaterfallId (Client - QA, User - cwf_dev_tier2)", (done) => {
		fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
			if (err) {
				console.log(err);
			} else {
				token = JSON.parse(data);
				let configBody = {
					headers: {
						'content-type': 'application/json',
						'Cookie': 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
						'Connection': 'keep-alive'
					},
					body: {
						type: 'event',
						data: {
							attributes: {
								scenarioDistribution: false,
								eventName: cdEventName,
								eventType: 'Cash Distribution',
								eventDate: '02 Oct 2019',
								clientId: clientId_qa,
								clientName: clientName_qa,
								waterfallId: waterfallId_investran,
								waterfallName: waterfallName_investran,
								waterfallType: 'TOTAL_RETURN',
								calcMethod: 'IRR'
							}
						}
					},
					strictSSL: false
				}

				chakram.post(token.url + 'core/events', undefined, configBody)
					.then(function (res) {
						assert(res).to.have.status(401);
					})
					.done(done);
			}
		});
	});
});

