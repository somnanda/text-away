import { expect } from "chai";
import fs from "fs";
import chakram from "chakram";
const assert = chakram.expect;
import _ from "lodash";
import frisby from "frisby";
import path from "path";

describe("Client Config Penetration Tests", () => {
  const clientId = "28";
  const clientId_qa = "28";
  const clientId_qa_ui = "29";
  const clientId_qa_api = "30";
  const clientName_qa = "QA";
  const restrictedClientId = "30";
  const restrictedClientName = "QA_API";
  const restrictedEventId = "9d3f7f64-f5d9-42b9-b66a-8cacd4030e18";
  const restrictedWaterfallId = "b042f4ff-b124-400b-a089-bbccd5c73b8e";
  const eventId2 = "6492e572-afe0-4210-8f48-4fd7fd40e489";
  const waterfallName = "Automation-DealByDeal";
  const waterfallId_totalreturn = "32043505-7f23-4a54-bfb0-a077bae4ff1a";
  const waterfallId_investran = "27b12995-853f-4974-9aed-cd2aa96a9497"; //'d5b95dfb-780d-4479-aae9-a0bbe2ad330a'; // <-- Use this for DEV
  const waterfallName_investran = "Automation-Investran";
  let random_waterfallname =
    "AutoBot-" +
    Math.random()
      .toString(36)
      .substring(8);
  let cdEventName =
    "API-Event-" +
    Math.random()
      .toString(36)
      .substring(8);
  let udEventName = Math.random()
    .toString(36)
    .substring(8);
  const currency = "USD";
  let token = {};
  let newEventId = "";

  it("POST Controller Client Config (Client - QA, User - cwf_dev_tier2)", done => {
    fs.readFile("tokens.json", "utf8", function readFileCallback(err, data) {
      if (err) {
        console.log(err);
      } else {
        token = JSON.parse(data);
        let configBody = {
          headers: {
            "content-type": "application/json",
            Cookie: "JWT=" + token.jwt + "; SMSESSION=" + token.smsession,
            Connection: "keep-alive"
          },
          body: {
            type: "clientConfig",
            data: {
              attributes: {
                investranDb: "INVPRD",
                investranDomainId: 240,
                investranDomainName: "Algebris NPL",
                clientId: clientId_qa
              }
            }
          },
          strictSSL: false
        };

        chakram
          .post(token.url + "core/clients/config", undefined, configBody)
          .then(function(res) {
            assert(res).to.have.status(401);

            let configBody = {
              headers: {
                "content-type": "application/json",
                Cookie: "JWT=" + token.jwt + "; SMSESSION=" + token.smsession,
                Connection: "keep-alive"
              },
              strictSSL: false
            };
            return chakram.delete(
              token.url + "core/clients/config/" + clientId_qa,
              undefined,
              configBody
            );
          })
          .then(function(res) {
            assert(res).to.have.status(401);
          })
          .done(done);
      }
    });
  });

  it("GET Client Config (Client - QA, User - cwf_dev_tier2)", done => {
    fs.readFile("tokens.json", "utf8", function readFileCallback(err, data) {
      if (err) {
        console.log(err);
      } else {
        token = JSON.parse(data);
        let configBody = {
          headers: {
            "content-type": "application/json",
            Cookie: "JWT=" + token.jwt + "; SMSESSION=" + token.smsession,
            Connection: "keep-alive"
          },
          strictSSL: false
        };
        chakram
          .get(token.url + "core/clients/config/" + clientId_qa, configBody)
          .then(function(res) {
            assert(res).to.have.status(200);
          })
          .done(done);
      }
    });
  });

  it("POST Read-Only Client Config (Client - QA_UI, User - cwf_dev_tier2)", done => {
    fs.readFile("tokens.json", "utf8", function readFileCallback(err, data) {
      if (err) {
        console.log(err);
      } else {
        token = JSON.parse(data);
        let configBody = {
          headers: {
            "content-type": "application/json",
            Cookie: "JWT=" + token.jwt + "; SMSESSION=" + token.smsession,
            Connection: "keep-alive"
          },
          body: {
            type: "clientConfig",
            data: {
              attributes: {
                investranDb: "INVPRD",
                investranDomainId: 240,
                investranDomainName: "Algebris NPL",
                clientId: clientId_qa_ui
              }
            }
          },
          strictSSL: false
        };

        chakram
          .post(token.url + "core/clients/config", undefined, configBody)
          .then(function(res) {
            assert(res).to.have.status(401);

            let configBody = {
              headers: {
                "content-type": "application/json",
                Cookie: "JWT=" + token.jwt + "; SMSESSION=" + token.smsession,
                Connection: "keep-alive"
              },
              strictSSL: false
            };
            return chakram.delete(
              token.url + "core/clients/config/" + clientId_qa_ui,
              undefined,
              configBody
            );
          })
          .then(function(res) {
            assert(res).to.have.status(401);
          })
          .done(done);
      }
    });
  });

  it("POST Accountant Client Config (Client - QA_API, User - cwf_dev_tier2)", done => {
    fs.readFile("tokens.json", "utf8", function readFileCallback(err, data) {
      if (err) {
        console.log(err);
      } else {
        token = JSON.parse(data);
        let configBody = {
          headers: {
            "content-type": "application/json",
            Cookie: "JWT=" + token.jwt + "; SMSESSION=" + token.smsession,
            Connection: "keep-alive"
          },
          body: {
            type: "clientConfig",
            data: {
              attributes: {
                investranDb: "INVPRD",
                investranDomainId: 240,
                investranDomainName: "Algebris NPL",
                clientId: clientId_qa_api
              }
            }
          },
          strictSSL: false
        };

        chakram
          .post(token.url + "core/clients/config", undefined, configBody)
          .then(function(res) {
            assert(res).to.have.status(401);

            let configBody = {
              headers: {
                "content-type": "application/json",
                Cookie: "JWT=" + token.jwt + "; SMSESSION=" + token.smsession,
                Connection: "keep-alive"
              },
              strictSSL: false
            };
            return chakram.delete(
              token.url + "core/clients/config/" + clientId_qa_api,
              undefined,
              configBody
            );
          })
          .then(function(res) {
            assert(res).to.have.status(401);
          })
          .done(done);
      }
    });
  });
});
