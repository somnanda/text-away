import { expect } from 'chai';
import fs from 'fs';
import chakram from 'chakram';
const assert = chakram.expect;
import _ from 'lodash';
import frisby from 'frisby';
import path from 'path';

describe('Investran Penetration Tests', () => {
  const clientId = '28';
  const clientId_qa = '28';
  const clientName_qa = 'QA';
  const clientId_qa_ui = '29';
  const clientName_qa_ui = 'QA_UI';
  const restrictedClientId = '30';
  const restrictedClientName = 'QA_API';
  const waterfallId_totalreturn = '32043505-7f23-4a54-bfb0-a077bae4ff1a';
  const waterfallId_investran = 'd5b95dfb-780d-4479-aae9-a0bbe2ad330a';
  const waterfallName_investran = 'Automation-Investran';
  const waterfallId_investran_qa_ui = '7ea5f7dc-b319-4e80-bc00-9b5e7cc47da0';
  let eventId_investran = '';
  let random_waterfallname =
    'AutoBot-' +
    Math.random()
      .toString(36)
      .substring(8);
  let cdEventName =
    'API-Event-' +
    Math.random()
      .toString(36)
      .substring(8);
  let udEventName = Math.random()
    .toString(36)
    .substring(8);
  const currency = 'USD';
  let token = {};
  let newEventId = '';

  it('Terms Sync (Client - QA, User - cwf_dev_tier2)', done => {
    fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
      if (err) {
        console.log(err);
      } else {
        token = JSON.parse(data);

        let termsSyncConfig = {
          headers: {
            'content-type': 'application/json',
            Cookie: 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
            waterfallId: waterfallId_investran,
            clientId: clientId_qa,
          },
          strictSSL: false,
        };
        chakram
          .get(token.url + `core/terms/sync/${waterfallId_investran}`, termsSyncConfig)
          .then(function(res) {
            assert(res).to.have.status(200);
          })
          .done(done);
      }
    });
  });

  it('Terms Sync (Client - QA_UI, User - cwf_dev_tier2)', done => {
    fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
      if (err) {
        console.log(err);
      } else {
        token = JSON.parse(data);

        let termsSyncConfig = {
          headers: {
            'content-type': 'application/json',
            Cookie: 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
            waterfallId: waterfallId_investran_qa_ui,
            clientId: clientId_qa_ui,
          },
          strictSSL: false,
        };
        chakram
          .get(token.url + `core/terms/sync/${waterfallId_investran_qa_ui}`, termsSyncConfig)
          .then(function(res) {
            assert(res).to.have.status(200);
          })
          .done(done);
      }
    });
  });

  it('Transactions Sync Restricted Flow (Client - QA_UI, User - cwf_dev_tier2)', done => {
    fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
      if (err) {
        console.log(err);
      } else {
        token = JSON.parse(data);

        let txSyncConfig = {
          headers: {
            'content-type': 'application/json',
            Cookie: 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
            waterfallId: waterfallId_investran_qa_ui,
            clientId: clientId_qa_ui,
          },
          strictSSL: false,
        };
        chakram
          .get(token.url + `core/transactions/investransync`, txSyncConfig)
          .then(function(res) {
            assert(res).to.have.status(401);
          })
          .done(done);
      }
    });
  });

  it('Transactions Sync (Client - QA, User - cwf_dev_tier2)', done => {
    fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
      if (err) {
        console.log(err);
      } else {
        token = JSON.parse(data);

        let txSyncConfig = {
          headers: {
            'content-type': 'application/json',
            Cookie: 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
            waterfallId: waterfallId_investran,
            clientId: clientId_qa,
          },
          strictSSL: false,
        };
        chakram
          .get(token.url + `core/transactions/investransync`, txSyncConfig)
          .then(function(res) {
            assert(res).to.have.status(200);
          })
          .done(done);
      }
    });
  });

  it('Core Sync (Client - QA_UI, User - cwf_dev_tier2)', done => {
    fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
      if (err) {
        console.log(err);
      } else {
        token = JSON.parse(data);

        let syncConfig = {
          headers: {
            'content-type': 'application/json',
            Cookie: 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
            waterfallId: waterfallId_investran_qa_ui,
          },
          strictSSL: false,
        };
        chakram
          .get(token.url + `core/syncs/${waterfallId_investran_qa_ui}`, syncConfig)
          .then(function(res) {
            assert(res).to.have.status(200);
          })
          .done(done);
      }
    });
  });

  it('Core Sync (Client - QA, User - cwf_dev_tier2)', done => {
    fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
      if (err) {
        console.log(err);
      } else {
        token = JSON.parse(data);

        let syncConfig = {
          headers: {
            'content-type': 'application/json',
            Cookie: 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
            waterfallId: waterfallId_investran,
          },
          strictSSL: false,
        };
        chakram
          .get(token.url + `core/syncs/${waterfallId_investran}`, syncConfig)
          .then(function(res) {
            assert(res).to.have.status(200);
          })
          .done(done);
      }
    });
  });
});
