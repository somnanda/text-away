import { expect } from 'chai'
import fs from 'fs'
import chakram from 'chakram'
const assert = chakram.expect
import _ from 'lodash'
import frisby from 'frisby'
import path from 'path'

describe('Penetration Tests for Unauthorized User', () => {
  const clientId = '28'
  const restrictedClientId = '36'
  const restrictedClientName = 'QA_API'
  const restrictedEventId = '9d3f7f64-f5d9-42b9-b66a-8cacd4030e18'
  const restrictedWaterfallId = 'b042f4ff-b124-400b-a089-bbccd5c73b8e'
  const eventId2 = '6492e572-afe0-4210-8f48-4fd7fd40e489'
  const waterfallName = 'Automation-DealByDeal'
  let cdEventName = Math.random()
    .toString(36)
    .substring(8)
  let udEventName = Math.random()
    .toString(36)
    .substring(8)
  let token = {}

  fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
    if (err) {
      console.log(err)
    } else {
      token = JSON.parse(data)
      frisby.globalSetup({
        request: {
          headers: {
            'Content-Type': 'application/json',
            Cookie: 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
          },
        },
      })
    }
  })

  it('Get Events Details Data for Unauthorized User', done => {
    process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0
    fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
      if (err) {
        console.log(err)
      } else {
        token = JSON.parse(data)
        frisby
          .get(token.url + `core/events/resultDetails/${restrictedEventId}/1`, { strictSSL: false })
          .then(res => {
            expect(res._response.status).to.be.equal(401)
          })
          .done(done)
      }
    })
  })

  it('Get Events Summary Data for Unauthorized User', done => {
    process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0
    fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
      if (err) {
        console.log(err)
      } else {
        token = JSON.parse(data)
        frisby
          .get(token.url + `core/events/resultSummary/${restrictedEventId}/1`, { strictSSL: false })
          .then(res => {
            expect(res._response.status).to.be.equal(401)
          })
          .done(done)
      }
    })
  })

  it('Get Waterfall Details for Unauthorized User', done => {
    process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0
    fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
      if (err) {
        console.log(err)
      } else {
        token = JSON.parse(data)
        frisby
          .get(token.url + `core/waterfalls/${restrictedClientId}`, { strictSSL: false })
          .then(res => {
            expect(res._response.status).to.be.equal(401)
          })
          .done(done)
      }
    })
  })

  it('Get Terms Data for Unauthorized User', done => {
    process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0
    fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
      if (err) {
        console.log(err)
      } else {
        token = JSON.parse(data)
        frisby
          .get(token.url + `core/syncs/${restrictedWaterfallId}`, { strictSSL: false })
          .then(res => {
            expect(res._response.status).to.be.equal(401)
          })
          .done(done)
      }
    })
  })

  it('Get Transaction Bucket Data for Unauthorized User', done => {
    process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0
    fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
      if (err) {
        console.log(err)
      } else {
        token = JSON.parse(data)
        frisby
          .get(token.url + `core/buckets/${restrictedWaterfallId}`, { strictSSL: false })
          .then(res => {
            expect(res._response.status).to.be.equal(401)
          })
          .done(done)
      }
    })
  })

  it('Upload NAV Data for Unauthorized Waterfall', done => {
    fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
      if (err) {
        console.log(err)
      } else {
        token = JSON.parse(data)
        let config = {
          formData: {
            file: fs.createReadStream(path.join(__dirname, '/../../resources/unauthorized_distribution.xlsx')),
          },
          headers: {
            'content-type': 'multipart/form-data',
            clientId: restrictedClientId,
            waterfallId: restrictedWaterfallId,
            clientName: restrictedClientName,
            Cookie: 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
          },
          strictSSL: false,
        }

        chakram
          .post(token.url + 'core/transactions/upload/TR_DIST', undefined, config)
          .then(function(res) {
            assert(res).to.have.status(401)
          })
          .done(done)
      }
    })
  })

  it('Upload NAV Data for Unrelated Client and Waterfall', done => {
    fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
      if (err) {
        console.log(err)
      } else {
        token = JSON.parse(data)
        let config = {
          formData: {
            file: fs.createReadStream(path.join(__dirname, '/../../resources/unauthorized_distribution.xlsx')),
          },
          headers: {
            'content-type': 'multipart/form-data',
            clientId: clientId,
            waterfallId: restrictedWaterfallId,
            clientName: restrictedClientName,
            Cookie: 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
          },
          strictSSL: false,
        }

        chakram
          .post(token.url + 'core/transactions/upload/TR_DIST', undefined, config)
          .then(function(res) {
            assert(res).to.have.status(401)
          })
          .done(done)
      }
    })
  })
})
