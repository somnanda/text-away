import { expect } from 'chai';
import fs from 'fs';
import chakram from 'chakram';
const assert = chakram.expect;
import _ from 'lodash';
import frisby from 'frisby';
import path from 'path';

describe('Penetration Tests - II', () => {

    const clientId = '28';
    const clientId_qa = '28';
    const restrictedClientId = '30';
    const restrictedClientName = 'QA_API';
    const restrictedEventId = '9d3f7f64-f5d9-42b9-b66a-8cacd4030e18';
    const restrictedWaterfallId = 'b042f4ff-b124-400b-a089-bbccd5c73b8e';
    const eventId2 = '6492e572-afe0-4210-8f48-4fd7fd40e489';
    const waterfallName = 'Automation-DealByDeal';
    let waterfallId_totalreturn = '32043505-7f23-4a54-bfb0-a077bae4ff1a';
    let random_waterfallname = 'AutoBot-' + Math.random().toString(36).substring(8);
    let cdEventName = Math.random().toString(36).substring(8);
    let udEventName = Math.random().toString(36).substring(8);
    const currency = 'USD';
    let token = {};


    it("Add Waterfall for Controller Role (Client - QA, User - cwf_dev_tier2)", (done) => {
        fs.readFile('tokens.json', 'utf8', function readFileCallback(err, data) {
            if (err) {
                console.log(err);
            } else {
                token = JSON.parse(data);
                let configBody = {
                    headers: {
                        'content-type': 'application/json',
                        'Cookie': 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
                        'Connection': 'keep-alive'
                    },
                    body: {
                        type: 'waterfalls',
                        data: {
                            attributes: {
                                clientId: clientId_qa,
                                currency: currency,
                                name: random_waterfallname,
                                status: 'In Progress',
                                calculationMethod: 'TOTAL_RETURN',
                                calculationResultsMethod: 'SPECIFIC_INVESTOR_ID',
                                reportingGroupUDF: 'Not Linked to Investran'
                            }
                        }
                    },
                    strictSSL: false
                }

                chakram.post(token.url + 'core/waterfalls', undefined, configBody)
                    .then(function (res) {
                        assert(res).to.have.status(401);

                        let tiersConfig = {
                            headers: {
                                'content-type': 'application/json',
                                'Cookie': 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
                                'waterfallId': waterfallId_totalreturn
                            },
                            body: {
                                type: 'tiers',
                                data: {
                                    attributes: [
                                        {
                                            waterfallId: waterfallId_totalreturn,
                                            tierId: 'e7abbed8-794c-4c76-884f-de8f1e1723c7',
                                            tierType: 'TR_ROC',
                                            tierName: 'Return of Capital',
                                            tierNum: 1
                                        },
                                        {
                                            waterfallId: waterfallId_totalreturn,
                                            tierId: 'c0b4663c-a993-4b63-9166-2ea755020f85',
                                            tierNum: 2,
                                            tierType: 'TR_PREFERRED_RETURN',
                                            calcMethod: 'IRR',
                                            lpTarget: 1,
                                            cipAllocation: 1,
                                            compoundingFrequency: 'Annually',
                                            dayCountMethod: 'Actual/365',
                                            dayIntervalAdjContributions: 0,
                                            dayIntervalAdjDistributions: 0,
                                            tierName: 'Pref. Return'
                                        },
                                        {
                                            waterfallId: waterfallId_totalreturn,
                                            tierId: '9f4fa654-1fda-4102-a145-cf402f3967ad',
                                            tierType: 'TR_CATCH_UP',
                                            cipAllocation: 1,
                                            cipTarget: 1,
                                            tierName: 'Catch-Up',
                                            tierNum: 3
                                        },
                                        {
                                            waterfallId: waterfallId_totalreturn,
                                            tierId: '1577f466-4c29-4802-9ae1-cc99b101f6e8',
                                            tierType: 'TR_FINAL_SPLIT',
                                            cipAllocation: 1,
                                            tierName: 'Final Split',
                                            tierNum: 4
                                        }
                                    ]
                                }
                            },
                            strictSSL: false
                        }
                        return chakram.post(token.url + "core/tiers/" + waterfallId_totalreturn, undefined, tiersConfig)
                    })
                    .then(function (res) {
                        assert(res).to.have.status(401);
                        // assert(res.body).to.equal('User does not have WATERFALL_EDIT, WATERFALL_ADD permissions');
                        let bucketConfig = {
                            headers: {
                                'content-type': 'application/json',
                                'Cookie': 'JWT=' + token.jwt + '; SMSESSION=' + token.smsession,
                                'waterfallId': waterfallId_totalreturn
                            },
                            body: {
                                type: 'buckets',
                                data: {
                                    attributes: [
                                        {
                                            bucketName: 'TR_NAV',
                                            waterfallId: waterfallId_totalreturn
                                        },
                                        {
                                            bucketName: 'TR_CONT',
                                            waterfallId: waterfallId_totalreturn
                                        },
                                        {
                                            bucketName: 'TR_DIST',
                                            waterfallId: waterfallId_totalreturn
                                        },
                                        {
                                            bucketName: 'TR_PC_REAL',
                                            waterfallId: waterfallId_totalreturn
                                        },
                                        {
                                            bucketName: 'TR_PC_UNREAL',
                                            waterfallId: waterfallId_totalreturn
                                        }
                                    ]
                                }
                            },
                            strictSSL: false
                        }
                        return chakram.post(token.url + "core/buckets/" + waterfallId_totalreturn, undefined, bucketConfig)
                    }).then(function (res) {
                        assert(res).to.have.status(401);
                        // assert(res.body).to.equal('User does not have WATERFALL_ADD, WATERFALL_EDIT permissions');
                    })
                    .done(done);
            }
        });
    });
});

