--- 
AWSTemplateFormatVersion: "2010-09-09"
Parameters: 
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC.

  EC2Subnet:
    Description: The subnets to place database instances in.
    Type: String

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro

  DeveloperName:
    Type: String
    Description: "Name of developer running the stack"    
Resources: 
  
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub CSG-CWF-${DeveloperName}-WS-EC2SG
      VpcId: !Ref VpcId
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: 10.0.0.0/8
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22        
      - CidrIp: 10.0.0.0/8
        IpProtocol: tcp
        FromPort: 8065
        ToPort: 8065
      - CidrIp: 10.0.0.0/8
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
      - CidrIp: 10.0.0.0/8
        IpProtocol: icmp
        FromPort: 8
        ToPort: -1
      - CidrIp: 172.23.128.0/22
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22        
      - CidrIp: 172.23.128.0/22
        IpProtocol: tcp
        FromPort: 8065
        ToPort: 8065        
      - CidrIp: 172.23.128.0/22
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
      - CidrIp: 172.23.128.0/22
        IpProtocol: icmp
        FromPort: 8
        ToPort: -1
      - CidrIp: 172.23.24.0/22
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22        
      - CidrIp: 172.23.24.0/22
        IpProtocol: tcp
        FromPort: 8065
        ToPort: 8065
      - CidrIp: 172.23.24.0/22
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443  
      - CidrIp: 172.23.24.0/22
        IpProtocol: icmp
        FromPort: 8
        ToPort: -1
  
  EC2Role: 
    Properties: 
      RoleName: !Sub CSG-CWF-${DeveloperName}-WS-ROLE
      AssumeRolePolicyDocument: 
        Statement: 
          - 
            Action: 
              - "sts:AssumeRole"
            Effect: Allow
            Principal: 
              Service: 
                - ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/IAMReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AWSCodeCommitPowerUser"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
        - "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
        - "arn:aws:iam::aws:policy/AWSXrayFullAccess" 
        - "arn:aws:iam::aws:policy/AWSLambdaFullAccess"
        - "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
    Type: "AWS::IAM::Role"
  
  InstanceProfile: 
    Properties: 
      Path: /
      Roles: 
        - !Ref EC2Role
    Type: "AWS::IAM::InstanceProfile"

  EC2Instance: 
    Metadata: 
      AWS::CloudFormation::Init: 
        configSets: 
          ascending: 
            - "config1"
            - "config2"
        config1:         
          files:             
            /home/ubuntu/ec2setup/baseVcnConfig.tpl: 
              content: !Sub | 
                export XKL_XMODMAP_DISABLE=1
                unset SESSION_MANAGER
                unset DBUS_SESSION_BUS_ADDRESS

                [ -x /etc/vnc/xstartup ] && exec /etc/vnc/xstartup
                [ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources
                xsetroot  -solid grey
                vncconfig  -iconic &

                gnome-panel &
                gnome-setting-daemon &
                metacity &
                nautilus &
                gnome-terminal &
              mode: "000644"
              owner: "ubuntu"
              group: "ubuntu"
            /home/ubuntu/ec2setup/setupVncServer.sh: 
              content: !Sub | 
                #!/bin/bash -xe
                yes | rm -r ~/.vnc
                echo -e "Citco123\nCitco123" | vncserver
                vncserver â€“kill :1
                cp ~/ec2setup/baseVcnConfig.tpl ~/.vnc/xstartup                
              mode: "000777"
              owner: "ubuntu"
              group: "ubuntu"
            /home/ubuntu/startVnc.sh:
              content: !Sub |
                #!/bin/bash -xe 
                vncserver -geometry 1920x1080 :1
              mode: "000777"
              owner: "ubuntu"
              group: "ubuntu"
            /home/ubuntu/ec2setup/setup.sh:
              content: !Sub |
                #!/bin/bash -xe
                
                echo "1" > ~/_setup_in_progress_please_wait
                #installVncServer:
                printf '\n\n\n\n ==============installVncServer================= \n\n\n\n'                                           
                apt-get -y install ubuntu-desktop vnc4server gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal > /dev/null
                bash ~/ec2setup/setupVncServer.sh
                #installAwsCli:
                printf '\n\n\n\n ==============installAwsCli================= \n\n\n\n'
                apt-get -y install awscli > /dev/null
                #installPython:
                printf '\n\n\n\n ==============installPython================= \n\n\n\n'
                apt-get -y install python-pip > /dev/null
                # installAwsNodejs:
                printf '\n\n\n\n ==============installAwsNodejs================= \n\n\n\n'
                curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
                apt-get -y install nodejs > /dev/null
                #Install Chromium
                apt-get -y install chromium-browser
                #Install vscode
                printf '\n\n\n\n ==============Install vscode================= \n\n\n\n'
                curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
                mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
                sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'
                apt-get -y update
                apt-get install code
                sed -i 's/BIG-REQUESTS/_IG-REQUESTS/' /usr/lib/x86_64-linux-gnu/libxcb.so.1  
                #Create default dev folder
                printf '\n\n\n\n ==============Create default dev folder================= \n\n\n\n'
                mkdir ~/dev
                mkdir ~/dev/waterfall                
                #Setup GIT 
                printf '\n\n\n\n ==============Setup GIT ================= \n\n\n\n'
                git config --global http.sslVerify false
                git config --global credential.UseHttpPath true
                git config --global credential.helper '!aws codecommit credential-helper $@'
                #Checkout base repos           
                printf '\n\n\n\n ==============Checkout base repos================= \n\n\n\n'
                git clone https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/csg-cwf-frontend-service ~/dev/waterfall/frontend
                git clone https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/csg-cwf-core-service ~/dev/waterfall/core
                git clone https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/csg-cwf-calculation-service ~/dev/waterfall/calculation
                git clone https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/csg-cwf-micro-services ~/dev/waterfall/micro-services
                git clone https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/csg-cwf-shared-components ~/dev/waterfall/shared-components
                #Install a working version of firefox:
                apt-get purge firefox
                apt-get install firefox=45.0.2+build1-0ubuntu1
                apt-mark hold firefox
                #Remove file marker
                rm ~/_setup_in_progress_please_wait
                echo "1" > ~/_setup_done
                reboot
              mode: "000777"
              owner: "ubuntu"
              group: "ubuntu"
        config2:
          commands:
            ec2Setup:                           
              command: |
                sudo -H -u ubuntu bash -c 'sudo bash ~/ec2setup/setup.sh > ~/setup.log 2> ~/setup.err'
    Properties: 
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: ami-059eeca93cf09eebd
      InstanceType: !Ref InstanceType
      SubnetId : !Ref EC2Subnet
      SecurityGroupIds:
      - !GetAtt EC2SecurityGroup.GroupId
      KeyName: !Ref KeyName      
      UserData: 
        Fn::Base64: !Sub | 
          #!/bin/bash -xe                   
          #This is a hack as out EC2 is not correctly configured for DNS
          PRIVATE_IP=`ip addr show eth0 | grep 'inet ' | awk '{print $2}' | cut -f1 -d'/' | tr '\.' '-'`
          PRIVATE_HOSTNAME="ip-${!PRIVATE_IP}"
          sed -i "2i127.0.0.1  ${!PRIVATE_HOSTNAME}" /etc/hosts
          #End of hack
          apt-get -y update && sudo apt-get -y upgrade          
          #Installs cfn-init
          apt-get -y install python-setuptools
          easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /usr/local/bin/cfn-init -v -c ascending --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
          #ssh -i c:\Users\boliveira\.ssh\boliveira.pem ubuntu@10.43.33.37 -L 5901:10.43.33.37:5901
          #sudo vncserver -geometry 1920x1080
      Tags: 
        - 
          Key: Name
          Value: !Sub "${DeveloperName}_WS"
        - 
          Key: BudgetCode
          Value: "CSG / Waterfall"
        - 
          Key: Env
          Value: DEV
        - 
          Key: EBSCostCenter
          Value: 4059586
        - 
          Key: LOB
          Value: CSG
        - 
          Key: AppName
          Value: Waterfall
        - 
          Key: ClientData
          Value: false
    Type: "AWS::EC2::Instance"
  
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value:
      Ref: EC2Instance  
  PrivateDNS:
    Description: Private DNSName of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PrivateDnsName
  PrivateIP:
    Description: Private IP address of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PrivateIp